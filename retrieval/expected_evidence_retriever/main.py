import json
import pandas as pd
from tqdm import tqdm
from ddgs import DDGS


from .utils import extract_evidence_from_claim, retrieve_external_evidence
from src.config.settings import ANTHROPIC_API_KEY
from verification.qa_generator.fact_check_qa_generator import FactCheckQAGenerator
from src.utils.text_pocessing import convert_types, get_claim_domain

tqdm.pandas()


def duckduckgo_search(query):
    ddgs = DDGS()
    results = []

    for result in ddgs.text(query, max_results=5):
        results.append(
            {
                "title": result["title"],
                "link": result["href"],
                "snippet": result["body"],
            }
        )

    return results


missing_evidence = [
    6,
    16,
    25,
    37,
    41,
    42,
    46,
    51,
    70,
    71,
    76,
    78,
    79,
    87,
    90,
    94,
    101,
    112,
    116,
    117,
    119,
    120,
    123,
    126,
    129,
    130,
    134,
    136,
    139,
    140,
    146,
    150,
    152,
    157,
    159,
    161,
    163,
    164,
    169,
    174,
    178,
    189,
    193,
    206,
    217,
    227,
    229,
    238,
    241,
    242,
    245,
    246,
    254,
    257,
    260,
    264,
    265,
    266,
    267,
    270,
    271,
    272,
    275,
    277,
    280,
    285,
    293,
    303,
    305,
    313,
    317,
    319,
    320,
    325,
    327,
    338,
    339,
    353,
    373,
    374,
    377,
    382,
    384,
    388,
    395,
    400,
    403,
    415,
    416,
    421,
    424,
    428,
    431,
    432,
    434,
    447,
    451,
    454,
    460,
    473,
    478,
    484,
    511,
    520,
    521,
    527,
    535,
    536,
    539,
    540,
    541,
    542,
    547,
    549,
    553,
    554,
    557,
    558,
    559,
    560,
    564,
    566,
    567,
    575,
    576,
    578,
    581,
    582,
    587,
    591,
    592,
    593,
    594,
    597,
    599,
    600,
    601,
    603,
    604,
    609,
    610,
    612,
    614,
    619,
    621,
    623,
    625,
    629,
    631,
    632,
    635,
    639,
    644,
    645,
    647,
    648,
    649,
    650,
    653,
    658,
    661,
    665,
    666,
    667,
    668,
    669,
    671,
    673,
    676,
    680,
    681,
    682,
    686,
    687,
    688,
    689,
    690,
    691,
    692,
    696,
    697,
    704,
    711,
    712,
    713,
    714,
    715,
    717,
    718,
    721,
    725,
    726,
    729,
    731,
    734,
    735,
    737,
    738,
    741,
    743,
    744,
    745,
    746,
    747,
    748,
    752,
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    764,
    765,
    766,
    770,
    772,
    773,
    775,
    777,
    778,
    781,
    784,
    786,
    790,
    797,
    800,
    806,
    808,
    809,
    811,
    813,
    814,
    821,
    824,
    825,
    828,
    829,
    830,
    831,
    832,
    837,
    839,
    840,
    842,
    843,
    850,
    851,
    852,
    853,
    854,
    856,
    858,
    860,
    862,
    864,
    866,
    867,
    868,
    871,
    873,
    874,
    879,
    881,
    882,
    884,
    886,
    891,
    892,
    895,
    896,
    897,
    898,
    899,
    900,
    909,
    911,
    913,
    914,
    918,
    922,
    924,
    925,
    927,
    928,
    930,
    932,
    934,
    936,
    938,
    939,
    940,
    944,
    945,
    948,
    952,
    954,
    957,
    959,
    960,
    966,
    970,
    971,
    972,
    978,
    979,
    980,
    983,
    990,
    994,
    995,
    996,
    1001,
    1005,
    1006,
    1007,
    1016,
    1019,
    1025,
    1026,
    1027,
    1028,
    1029,
    1032,
    1033,
    1036,
    1037,
    1039,
    1040,
    1041,
    1047,
    1050,
    1056,
    1059,
    1062,
    1063,
    1066,
    1068,
    1070,
    1078,
    1079,
    1082,
    1083,
    1089,
    1091,
    1102,
    1103,
    1105,
    1107,
    1111,
    1112,
    1114,
    1117,
    1122,
    1124,
    1131,
    1135,
    1141,
    1144,
]


def main():
    df = pd.read_json("data/evidence/retrieved_evidence_final.json", encoding="utf-8")
    # df.dropna(subset=["gold_evidence"], inplace=True)

    print(f"\nüîç Retrieving evidence for {len(missing_evidence)} claims..\n")

    # if "retrieved_evidence" not in df.columns:
    #     df["retrieved_evidence"] = None

    for i in tqdm(range(len(missing_evidence))):
        claim = df.iloc[i]
        claim_id = claim["ClaimID"]

        if claim_id in missing_evidence:
            claim_text = claim["claim"]

            evidence = retrieve_external_evidence(claim_text)

            if not evidence:
                # retry twice
                print("\nNo evidence found, retrying...\n")
                for _ in range(2):
                    retrieved_evidence = retrieve_external_evidence(claim_text)
                    if retrieved_evidence:
                        break

            df.at[i, "retrieved_evidence"] = evidence

    df.to_json(
        "data/evidence/retrieved_evidence2.json",
        orient="records",
        force_ascii=False,
        indent=4,
    )

    print("‚úì Retrieved evidence saved to data/evidence/retrieved_evidence2.json")

    return df


if __name__ == "__main__":
    main()
